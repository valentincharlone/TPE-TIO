/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabajotmc;
import java.io.BufferedReader; 
import java.io.IOException;
import java.io.InputStreamReader; 
import java.util.Scanner;
/**
 *
 * @author Rossi
 */
public class TrabajoTMC {

    public static float capacidad = 0;

    public static void main(String[] args) { 
        int parte = 0;
        Scanner scan = new Scanner(System.in);
        System.out.println("ingrese que parte desea resolver 1 o 2 " ); 
        parte = scan.nextInt();
        if (parte==1){ 
            programParte1();
        } else { 
            programParte2();
        }
    }
    
    public static void programParte1 (){ 
        Scanner scan = new Scanner(System.in); 
        float deltaTiempo,alturaInicialDeAgua,entrada,salida,area,alturaTanque;
        System.out.println("Ingrese delta tiempo");
        deltaTiempo = scan.nextFloat();
        System.out.println("Ingrese altura inicial del agua"); 
        alturaInicialDeAgua = scan.nextFloat();
        System.out.println("Ingrese entrada de agua"); 
        entrada = scan.nextFloat();
        System.out.println("Ingrese salida de agua"); 
        salida = scan.nextFloat();
        System.out.println("Ingrese area del tanque"); 
        area = scan.nextFloat();
        System.out.println("Ingrese altura del tanque"); 
        alturaTanque = scan.nextFloat(); 
        if(((entrada<=salida)&&(alturaInicialDeAgua==alturaTanque)) || (entrada>salida)){
            float[] arr = new float[4];
            float[] imprimir = new float[2]; 
            float tiempoVaciado=0; 
            float iteraciones=0;
            arr = calcularTiempoDeLlenado(area,entrada,salida,alturaInicialDeAgua,alturaTanque,deltaTiempo); 
            System.out.println("tiempo de llenado " + arr[1] + " segundos en "+ arr[3] +" iteraciones"); 
            System.out.println("primer tiempo en que el agua es >= C/2 " + arr[0] + " segundos");
            imprimir = calcularTiempoDeVaciado(area,salida,arr[2],alturaTanque,deltaTiempo); 
            tiempoVaciado=imprimir[0]+arr[1]; 
            iteraciones=arr[3]+imprimir[1];
            System.out.println("tiempo de vaciado " + tiempoVaciado + " segundos en "+iteraciones+" iteraciones");
        } else { 
            System.out.println("los datos ingresados son absurdos");
        }
    }
    
    public static void programParte2(){ 
        Scanner scan = new Scanner(System.in); 
        int inciso; 
        float deltaTiempo,alturaInicialDeAgua,entrada,constante,constante1,constante2,area,alturaTanque;
        System.out.println("Ingrese delta tiempo");
        deltaTiempo = scan.nextFloat();
        System.out.println("Ingrese altura inicial del agua"); 
        alturaInicialDeAgua = scan.nextFloat();
        System.out.println("Ingrese entrada de agua"); 
        entrada = scan.nextFloat();
        System.out.println("Ingrese la constante K "); 
        constante = scan.nextFloat();
        System.out.println("Ingrese la constante W "); 
        constante1 = scan.nextFloat();
        System.out.println("Ingrese la constante G "); 
        constante2 = scan.nextFloat();
        System.out.println("Ingrese area del tanque"); 
        area = scan.nextFloat();
        System.out.println("Ingrese altura del tanque"); 
        alturaTanque = scan.nextFloat();  
        System.out.println("ingrese que inciso desea resolver K=1 , W=2 o G=3"); 
        inciso = scan.nextInt(); 
        if(((entrada==0)&&(alturaInicialDeAgua==alturaTanque)) || (entrada>0)){
            switch (inciso){ 
                case 1: 
                    imprimirIncisoA(constante,area,entrada,alturaInicialDeAgua,alturaTanque,deltaTiempo); 
                    break;
                case 2: 
                    imprimirIncisoB(constante1,area,entrada,alturaInicialDeAgua,alturaTanque,deltaTiempo);               
                    break;
                case 3: 
                    imprimirIncisoC(constante2,area,entrada,alturaInicialDeAgua,alturaTanque,deltaTiempo); 
                    break;
            } 
        } else { 
            System.out.println("los datos ingresados son absurdos");
        }   
    }
public static void imprimirIncisoA(float constante,float area,float entrada,
            float alturaInicialDeAgua,float alturaTanque,float deltaTiempo){ 
        float[] incisoC = new float[2]; 
        float[] arr = new float[3]; 
arr = calcularTiempoDeLlenadoSalida1(constante,area,entrada,alturaInicialDeAgua,alturaTanque,deltaTiempo);
        incisoC = calcularTiempoDeVaciado1(constante,area,arr[2],alturaTanque,deltaTiempo);
        System.out.println("tiempo de llenado " + arr[1] + " segundos en "+ arr[3]+ " iteraciones"); 
        System.out.println("primer tiempo en que el agua es >= C/2 " + arr[0] + " segundos"); 
float tiempoVaciado = arr[1]+incisoC[0]; 
        float iteraciones = arr[3]+incisoC[1];
        System.out.println("tiempo de vaciado " + incisoC[0] + " segundos en "+incisoC[1]+ " iteraciones");
    }  
    
     public static void imprimirIncisoC(float constante,float area,float entrada,
            float alturaInicialDeAgua,float alturaTanque,float deltaTiempo){ 
        float[] incisoC = new float[2]; 
        float[] arr = new float[3];
        arr = calcularTiempoDeLlenadoSalida3(constante,area,entrada,alturaInicialDeAgua,alturaTanque,deltaTiempo);
        incisoC = calcularTiempoDeVaciadoSalida3(constante,area,arr[2],alturaTanque,deltaTiempo);
        System.out.println("tiempo de llenado " + arr[1] + " segundos en "+ arr[3]+ " iteraciones"); 
        System.out.println("primer tiempo en que el agua es >= C/2 " + arr[0] + " segundos"); 
        float tiempoVaciado = arr[1]+incisoC[0]; 
        float iteraciones = arr[3]+incisoC[1];
        System.out.println("tiempo de vaciado " + tiempoVaciado + " segundos en "+iteraciones+ " iteraciones"); }

//parte 1 inciso a y c
    public static float[] calcularTiempoDeLlenado(float area,float entrada,float salida,
            float columnaAguaInicial,float alturaTanque,float deltaTiempo){
         float alturaAgua=0, arreglo[],tiempo=0;  
         int iteraciones=0;
         boolean llego=false;}
        arreglo = new float[4]; 
        if(columnaAguaInicial<alturaTanque){
            tiempo = deltaTiempo; 
            alturaAgua = columnaAguaInicial+(entrada-salida)*deltaTiempo/area; 
            iteraciones++;
            while (alturaAgua < alturaTanque) { //si me paso restarle el ultimo valor, agregarle la altura final del agua al arreglo
                if ((alturaAgua >= (alturaTanque/2)) && (!llego)) {
                    arreglo[0] = tiempo; 
                    llego=true;
                } 
                iteraciones++;
                tiempo += deltaTiempo;
                alturaAgua = alturaAgua+(entrada-salida)*deltaTiempo/area;
            }  
            arreglo[1]=tiempo;
            arreglo[2]=alturaAgua; //para darsela a tiempoDeVaciado!!! 
            arreglo[3]= iteraciones;
        }else{ 
            arreglo[1]=tiempo;
            arreglo[2]=alturaTanque; //para darsela a tiempoDeVaciado!!! 
            arreglo[3]= iteraciones;
            
        return arreglo;
    }
    }

 //parte 1 inciso b
    public static float[] calcularTiempoDeVaciado(float area, float salida, float columnaAguaInicial, 
            float alturaTanque, float deltaTiempo) { // 
        float alturaAgua,tiempo=0; 
        float[] arr = new float[2]; 
        int iteraciones=0;
        tiempo += deltaTiempo; //revisar la variable tiempo !!!!!!!!
        alturaAgua = columnaAguaInicial+(0-salida)*deltaTiempo/area; 
        iteraciones++;
        while (alturaAgua > 0) { 
            tiempo += deltaTiempo;
            alturaAgua = alturaAgua+(0-salida)*deltaTiempo/area; 
            iteraciones++;
        } 
        if(alturaAgua<0){ 
           tiempo-=deltaTiempo; 
            iteraciones--;
        }
        arr[0]=tiempo; 
        arr[1]=iteraciones;
        return arr;}

public static void imprimirIncisoB(float constante,float area,float entrada,
            float alturaInicialDeAgua,float alturaTanque,float deltaTiempo){ 
        float[] incisoC = new float[2];  
        float[] arr = new float[3]; 
        float tiempoVaciado,iteraciones;
        arr = calcularTiempoDeLlenadoSalida2(constante,area,entrada,alturaInicialDeAgua,alturaTanque,deltaTiempo);
        incisoC = calcularTiempoDeVaciadoSalida2(constante,area,arr[2],alturaTanque,deltaTiempo);
        System.out.println("tiempo de llenado " + arr[1] + " segundos en "+ arr[3]+ " iteraciones"); 
        System.out.println("primer tiempo en que el agua es >= C/2 " + arr[0] + " segundos"); 
        tiempoVaciado=incisoC[0]; 
        iteraciones=incisoC[1];
        System.out.println("tiempo de vaciado " + tiempoVaciado + " segundos en "+iteraciones+ " iteraciones");
    }  

public static float[] calcularTiempoDeLlenadoSalida1(float constante,float area, float entrada, 
            float columnaAguaInicial, float alturaTanque, float deltaTiempo) {
        float alturaAgua,salida,arreglo[],tiempo=0; 
        int iteraciones=0;
        arreglo = new float[4]; 
        if (columnaAguaInicial<alturaTanque){
            salida=constante*deltaTiempo;
            alturaAgua = columnaAguaInicial+(entrada-salida)*deltaTiempo/area;
            tiempo += deltaTiempo; 
            iteraciones++;
            while (alturaAgua < alturaTanque) { 
                if (alturaAgua >= alturaTanque / 2) {
                    arreglo[0] = tiempo;
                }
            tiempo += deltaTiempo;
            salida=constante*tiempo;
            alturaAgua = columnaAguaInicial+(entrada-salida)*deltaTiempo/area; 
            iteraciones++; 
            } 
            arreglo[1]=tiempo; 
            arreglo[2]=alturaAgua; 
            arreglo[3]=iteraciones;
        } else{ 
        arreglo[1]=tiempo; 
        arreglo[2]=columnaAguaInicial; 
        arreglo[3]=iteraciones; 
        }
        return arreglo;          
    } 
    //parte 2 inciso a, resuleve II
    public static float[] calcularTiempoDeVaciado1(float constante,float area, float columnaAguaInicial, 
            float alturaTanque, float deltaTiempo) {
        float alturaAgua,salida,tiempo=0;
        float[] arr = new float[2];
        int iteraciones=0; 
        salida=constante*deltaTiempo;
        alturaAgua = columnaAguaInicial+(0-salida)*deltaTiempo/area;
        tiempo += deltaTiempo; 
        iteraciones++;
        while (alturaAgua>0) { 
            tiempo += deltaTiempo;
            salida=constante*tiempo;
            alturaAgua = alturaAgua+(0-salida)*deltaTiempo/area;
            iteraciones++;
        } 
        arr[0]=tiempo; 
        arr[1]=iteraciones;
        return arr;
    }  
    //parte 2 inciso b, resuelve I y III
    public static float[] calcularTiempoDeLlenadoSalida2(float constante,float area, float entrada, 
            float columnaAguaInicial, float alturaTanque, float deltaTiempo) {
        float alturaAgua,salida,arreglo[],tiempo=0; 
        int iteraciones=0; 
        boolean llego=false;
        arreglo = new float[4]; 
        if (columnaAguaInicial<alturaTanque){
            salida=constante*deltaTiempo*deltaTiempo;
            alturaAgua = columnaAguaInicial+(entrada-salida)*deltaTiempo/area;
            tiempo += deltaTiempo; 
            iteraciones++;
            while (alturaAgua < alturaTanque) { 
                if ((alturaAgua >= alturaTanque/2) && (!llego)) {
                    arreglo[0] = tiempo; 
                    llego=true;
                } 
                tiempo += deltaTiempo;
                salida=constante*tiempo*tiempo; 
                alturaAgua = alturaAgua+(entrada-salida)*deltaTiempo/area; 
                iteraciones++;
            } 
            if(alturaAgua>alturaTanque){ 
                alturaAgua=alturaTanque;
                }
            arreglo[1]=tiempo; 
            arreglo[2]=alturaAgua; 
            arreglo[3]= iteraciones; 
        } else { 
            arreglo[1]=tiempo; 
            arreglo[2]=columnaAguaInicial; 
            arreglo[3]= iteraciones;
        }
        return arreglo;
    } 
    //parte 2 inciso b resuelve II
    public static float[] calcularTiempoDeVaciadoSalida2(float constante,float area, float columnaAguaInicial, 
            float alturaTanque, float deltaTiempo) {
        float alturaAgua=0,salida,tiempo=0; 
        float[] arr = new float[2]; 
        int iteraciones=0;
        salida=constante*deltaTiempo*deltaTiempo;
        alturaAgua = columnaAguaInicial+(0-salida)*deltaTiempo/area;
        tiempo += deltaTiempo;
        iteraciones++;
        while (alturaAgua > 0) { 
            tiempo += deltaTiempo; 
            salida=constante*tiempo*tiempo;
            alturaAgua = alturaAgua+(0-salida)*deltaTiempo/area;
            iteraciones++;
        } 
        arr[0]= tiempo;
        arr[1]= iteraciones;
        return arr;
    }  
    // parte 2 inciso c resuelve I y III
    public static float[] calcularTiempoDeLlenadoSalida3(float constante,float area, float entrada, 
            float columnaAguaInicial, float alturaTanque, float deltaTiempo) {
        float alturaAgua,salida,arreglo[],tiempo=0;   
        int iteraciones=0;
        arreglo = new float[4]; 
        if(columnaAguaInicial<alturaTanque){
            salida=constante/area*columnaAguaInicial;
            alturaAgua = columnaAguaInicial+(entrada-salida)*deltaTiempo/area;
            tiempo += deltaTiempo; 
            iteraciones++;
            while (alturaAgua < alturaTanque) { 
                if (alturaAgua >= alturaTanque/2) {
                    arreglo[0] = deltaTiempo;
                }
                tiempo += deltaTiempo;
                salida=constante/area*alturaAgua; 
                alturaAgua = alturaAgua+(entrada-salida)*deltaTiempo/area;
                iteraciones++;
            } 
            arreglo[1]=tiempo; 
            arreglo[2]=alturaAgua; 
            arreglo[3]=iteraciones; 
        } else{ 
            arreglo[1]=tiempo; 
            arreglo[2]=columnaAguaInicial; 
            arreglo[3]=iteraciones; 
        }     
    return arreglo;
    } 

//parte 2 inciso c resuelve II
    public static float[] calcularTiempoDeVaciadoSalida3(float constante,float area, float columnaAguaInicial, 
            float alturaTanque, float deltaTiempo) {
        float alturaAgua,salida,tiempo=0; 
        float[] arr = new float[2]; 
        int iteraciones=0; 
        double alturaMinima=0.0000000009;
        salida=constante/area*columnaAguaInicial;
        alturaAgua = columnaAguaInicial+(0-salida)*deltaTiempo/area;
        tiempo += deltaTiempo;
        iteraciones++;
        while (alturaAgua > alturaMinima) { 
            salida=constante/area*alturaAgua;
            alturaAgua = alturaAgua+(0-salida)*deltaTiempo/area;
            tiempo += deltaTiempo; 
            iteraciones++;
        } 
        arr[0]=tiempo; 
        arr[1]=iteraciones;
        return arr;
    }    
}
     